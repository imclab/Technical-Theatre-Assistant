package com.zgrannan.crewandroid;

import java.util.ArrayList;

import android.content.Context;
import android.widget.Toast;

/**
 * This class stores data about an attempted build of a set piece. It can
 * contain warnings about a set piece build that can be ignored. It can also
 * contain errors about the set piece that are not recoverable.
 * 
 * @author Zack Grannan
 * @version 0.96
 * 
 */
public class BuildResult {
	/**
	 * A boolean that is true if the build was successful, false otherwise
	 */
	private boolean success;

	/**
	 * A boolean that is true if the build has a warning, false otherwise.
	 */
	private boolean warn;

	/**
	 * The message to be displayed to the user about why the build could not be
	 * completed.
	 */
	private String warnMessage;
	/**
	 * A list of messages regarding the build processes. Designed for error
	 * messages, although status messages would work OK.
	 */
	private ArrayList<String> errorMessages;

	/**
	 * 
	 * @return True if the build was successful, false otherwise.
	 */
	public boolean success() {
		return success;
	}

	/**
	 * 
	 * @return True if a warning is present, false otherwise.
	 */
	public boolean hasWarning() {
		return warn;
	}

	/**
	 * @return A warning message for the user.
	 */
	public String getWarningMessage() {
		return warnMessage;
	}

	/**
	 * Loads a warning into this result.
	 * 
	 * @param message
	 *            The message the user will receive.
	 */
	public void warn(String message) {
		warn = true;
		warnMessage = message;
	}

	/**
	 * Called when the build was not successful.
	 */
	public void fail() {
		success = false;
	}

	/**
	 * @return The messages generated by the build process.
	 */
	public ArrayList<String> getMessages() {
		return errorMessages;
	}

	/**
	 * Adds a message to the build process. If this message is an error message,
	 * don't forget to call {@link fail()}
	 * 
	 * @param message
	 *            The message that will be added.
	 */
	public void addMessage(String message) {
		errorMessages.add(message);
	}

	/**
	 * Creates a new BuildResult from a value.
	 * 
	 * @param value
	 *            If true, the BuildResult will represent success. If false, it
	 *            will represent failure, and a generic failure message will be
	 *            input.
	 */
	public BuildResult(Context context, boolean value) {
		errorMessages = new ArrayList<String>();
		success = value;
		if (!value) {
			errorMessages.add(context.getString(R.string.build_failed));
		}
	}

	/**
	 * Creates a new BuildResult. It is successful unless {@link fail()} is
	 * called.
	 */
	public BuildResult() {
		errorMessages = new ArrayList<String>();
		success = true;
	}

	/**
	 * Produces a toast that displays all of the messages.
	 * 
	 * @param context
	 *            The calling context.
	 */
	public void showErrors(Context context) {
		String result = "";
		for (int i = 0; i < errorMessages.size() - 1; i++) {
			result += errorMessages.get(i) + "\n\n";
		}
		result += errorMessages.get(errorMessages.size() - 1);
		Toast.makeText(context, result, Toast.LENGTH_LONG).show();
	}

}
